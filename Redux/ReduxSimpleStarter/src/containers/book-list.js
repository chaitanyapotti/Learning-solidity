import React, { Component } from "react";
import { connect } from "react-redux";
import { selectBook } from "../actions/index";
import { bindActionCreators } from "redux";

// bindActionCreators makes sure that action generated by action creator passes through all reducers

//A container is a react component that has a direct connection with the state in redux

//we create containers from components that care about state

// At every change in reducer, all containers call mapStateToProps which further calls render in each container.
class BookList extends Component {
  render() {
    console.log("re-render", "book detail");
    return <ul className="list-group col-sm-4">{this.renderList()}</ul>;
  }

  renderList = () => {
    return this.props.books.map(item => {
      return (
        <li onClick={() => this.props.selectBook(item)} className="list-group-item" key={item.title}>
          {item.title}
        </li>
      );
    });
  };
}

//whatever is returned from here will show up as props in booklist
const mapStateToProps = state => {
  console.log("re-render", "books");
  return {
    books: state.books
  };
};

//Anything returned from this function will endup as props in booklist
//whenever selectbook is called, the result should be passed to all the reducers
const mapDispatchToProps = dispatch => bindActionCreators({ selectBook: selectBook }, dispatch);

//promote booklist from a component to a container
export default connect(
  mapStateToProps,
  mapDispatchToProps
)(BookList);
//connect takes a map function and component to produce a container
